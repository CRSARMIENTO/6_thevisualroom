eclipse.preferences.version=1
org.eclipse.cdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="false" context\="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted\="false" description\="A template that contains our C++ program" enabled\="true" name\="C++ with main">/*\nFile name\: ${file_name}\nDate\: ${date}\nAuthor\: Andrew Roberts\n*/\n\n\#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n\n\t// Place code here\n\treturn 0;\n\n}</template><template autoinsert\="false" context\="org.eclipse.cdt.core.cxxHeader.contenttype_context" deleted\="false" description\="A template that contains our C++ header" enabled\="true" name\="C++ header">/*\nFile name\: ${file_name}\nDate\: ${date}\nAuthor\: Andrew Roberts\n*/\n\n\#ifndef ${include_guard_symbol}\n\#define ${include_guard_symbol}\n\n\#include &lt;string&gt;\n\nusing namespace std;\n\nclass ${file_base}\n{\n\tprivate\:\n\t\t// give private variables here\n\t\tint private_variable;\n\n\tpublic\:\n\t\t// constructors\n\t\t${file_base}();\n\t\t${file_base}(int);\n\n\t\t// destructor\n\t\t~${file_base}();\n\n\t\t// give public accessor methods here\n\t\tint accessor_method();\n\n\t\t// give public mutator methods here\n\t\tvoid mutator_method(int);\n};\n\n\#endif /* ${include_guard_symbol} */</template><template autoinsert\="false" context\="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted\="false" description\="A template that contains our C++ program" enabled\="true" name\="C++ header source">/*\nFile name\: ${file_name}\nDate\: ${date}\nAuthor\: Andrew Roberts\n*/\n\n\#include "${file_base}.h"\n\#include &lt;iostream&gt;\n\nusing namespace std;\n\n// default constructor\:\n${file_base}\:\:${file_base}()\n{\n\t// default variables\n\tprivate_variable \= 0;\n}\n\n// constructor\:\n${file_base}\:\:${file_base}(int private_variable)\n{\n\t// set variables\n\tthis-&gt;private_variable \= private_variable;\n}\n\n// destructor\:\n${file_base}\:\:~${file_base}()\n{\n\t// settable variables\n}\n\n// accessor methods\nint ${file_base}\:\:accessor_method()\n{\n\treturn private_variable;\n}\n\n// mutator methods\nvoid ${file_base}\:\:mutator_method(int public_variable)\n{\n\tprivate_variable \= public_variable;\n}</template></templates>
spelling_locale=en_GB
spelling_locale_initialized=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
